//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Code.Global.MainMenu.Components;

public partial class PlayerEntity {

    public ActiveComponent active { get { return (ActiveComponent)GetComponent(PlayerComponentsLookup.Active); } }
    public bool hasActive { get { return HasComponent(PlayerComponentsLookup.Active); } }

    public void AddActive(bool newValue) {
        var index = PlayerComponentsLookup.Active;
        var component = (ActiveComponent)CreateComponent(index, typeof(ActiveComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceActive(bool newValue) {
        var index = PlayerComponentsLookup.Active;
        var component = (ActiveComponent)CreateComponent(index, typeof(ActiveComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveActive() {
        RemoveComponent(PlayerComponentsLookup.Active);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PlayerMatcher {

    static Entitas.IMatcher<PlayerEntity> _matcherActive;

    public static Entitas.IMatcher<PlayerEntity> Active {
        get {
            if (_matcherActive == null) {
                var matcher = (Entitas.Matcher<PlayerEntity>)Entitas.Matcher<PlayerEntity>.AllOf(PlayerComponentsLookup.Active);
                matcher.componentNames = PlayerComponentsLookup.componentNames;
                _matcherActive = matcher;
            }

            return _matcherActive;
        }
    }
}
