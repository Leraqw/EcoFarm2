//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PlayerEntity {

    public PlayerModeButtonsEnabledListenerComponent playerModeButtonsEnabledListener { get { return (PlayerModeButtonsEnabledListenerComponent)GetComponent(PlayerComponentsLookup.PlayerModeButtonsEnabledListener); } }
    public bool hasPlayerModeButtonsEnabledListener { get { return HasComponent(PlayerComponentsLookup.PlayerModeButtonsEnabledListener); } }

    public void AddPlayerModeButtonsEnabledListener(System.Collections.Generic.List<IPlayerModeButtonsEnabledListener> newValue) {
        var index = PlayerComponentsLookup.PlayerModeButtonsEnabledListener;
        var component = (PlayerModeButtonsEnabledListenerComponent)CreateComponent(index, typeof(PlayerModeButtonsEnabledListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlayerModeButtonsEnabledListener(System.Collections.Generic.List<IPlayerModeButtonsEnabledListener> newValue) {
        var index = PlayerComponentsLookup.PlayerModeButtonsEnabledListener;
        var component = (PlayerModeButtonsEnabledListenerComponent)CreateComponent(index, typeof(PlayerModeButtonsEnabledListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerModeButtonsEnabledListener() {
        RemoveComponent(PlayerComponentsLookup.PlayerModeButtonsEnabledListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PlayerMatcher {

    static Entitas.IMatcher<PlayerEntity> _matcherPlayerModeButtonsEnabledListener;

    public static Entitas.IMatcher<PlayerEntity> PlayerModeButtonsEnabledListener {
        get {
            if (_matcherPlayerModeButtonsEnabledListener == null) {
                var matcher = (Entitas.Matcher<PlayerEntity>)Entitas.Matcher<PlayerEntity>.AllOf(PlayerComponentsLookup.PlayerModeButtonsEnabledListener);
                matcher.componentNames = PlayerComponentsLookup.componentNames;
                _matcherPlayerModeButtonsEnabledListener = matcher;
            }

            return _matcherPlayerModeButtonsEnabledListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PlayerEntity {

    public void AddPlayerModeButtonsEnabledListener(IPlayerModeButtonsEnabledListener value) {
        var listeners = hasPlayerModeButtonsEnabledListener
            ? playerModeButtonsEnabledListener.value
            : new System.Collections.Generic.List<IPlayerModeButtonsEnabledListener>();
        listeners.Add(value);
        ReplacePlayerModeButtonsEnabledListener(listeners);
    }

    public void RemovePlayerModeButtonsEnabledListener(IPlayerModeButtonsEnabledListener value, bool removeComponentWhenEmpty = true) {
        var listeners = playerModeButtonsEnabledListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemovePlayerModeButtonsEnabledListener();
        } else {
            ReplacePlayerModeButtonsEnabledListener(listeners);
        }
    }
}
