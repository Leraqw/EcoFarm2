//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ECS.Components.RequireViewOfTypeComponent requireViewOfType { get { return (Code.ECS.Components.RequireViewOfTypeComponent)GetComponent(GameComponentsLookup.RequireViewOfType); } }
    public bool hasRequireViewOfType { get { return HasComponent(GameComponentsLookup.RequireViewOfType); } }

    public void AddRequireViewOfType(System.Type newValue) {
        var index = GameComponentsLookup.RequireViewOfType;
        var component = (Code.ECS.Components.RequireViewOfTypeComponent)CreateComponent(index, typeof(Code.ECS.Components.RequireViewOfTypeComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceRequireViewOfType(System.Type newValue) {
        var index = GameComponentsLookup.RequireViewOfType;
        var component = (Code.ECS.Components.RequireViewOfTypeComponent)CreateComponent(index, typeof(Code.ECS.Components.RequireViewOfTypeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveRequireViewOfType() {
        RemoveComponent(GameComponentsLookup.RequireViewOfType);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRequireViewOfType;

    public static Entitas.IMatcher<GameEntity> RequireViewOfType {
        get {
            if (_matcherRequireViewOfType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RequireViewOfType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRequireViewOfType = matcher;
            }

            return _matcherRequireViewOfType;
        }
    }
}
