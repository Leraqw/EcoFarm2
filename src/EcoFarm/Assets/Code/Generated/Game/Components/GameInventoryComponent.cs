//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity inventoryEntity { get { return GetGroup(GameMatcher.Inventory).GetSingleEntity(); } }
    public InventoryComponent inventory { get { return inventoryEntity.inventory; } }
    public bool hasInventory { get { return inventoryEntity != null; } }

    public GameEntity SetInventory(Code.InventoryComponent newValue) {
        if (hasInventory) {
            throw new Entitas.EntitasException("Could not set Inventory!\n" + this + " already has an entity with InventoryComponent!",
                "You should check if the context already has a inventoryEntity before setting it or use context.ReplaceInventory().");
        }
        var entity = CreateEntity();
        entity.AddInventory(newValue);
        return entity;
    }

    public void ReplaceInventory(Code.InventoryComponent newValue) {
        var entity = inventoryEntity;
        if (entity == null) {
            entity = SetInventory(newValue);
        } else {
            entity.ReplaceInventory(newValue);
        }
    }

    public void RemoveInventory() {
        inventoryEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public InventoryComponent inventory { get { return (InventoryComponent)GetComponent(GameComponentsLookup.Inventory); } }
    public bool hasInventory { get { return HasComponent(GameComponentsLookup.Inventory); } }

    public void AddInventory(Code.InventoryComponent newValue) {
        var index = GameComponentsLookup.Inventory;
        var component = (InventoryComponent)CreateComponent(index, typeof(InventoryComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceInventory(Code.InventoryComponent newValue) {
        var index = GameComponentsLookup.Inventory;
        var component = (InventoryComponent)CreateComponent(index, typeof(InventoryComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveInventory() {
        RemoveComponent(GameComponentsLookup.Inventory);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInventory;

    public static Entitas.IMatcher<GameEntity> Inventory {
        get {
            if (_matcherInventory == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Inventory);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInventory = matcher;
            }

            return _matcherInventory;
        }
    }
}
